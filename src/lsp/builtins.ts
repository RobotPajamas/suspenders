/**
 * A Typescript/VSCode port of the utils/generate-builtins concept that will need to be built into Pants eventually
 * Instead of creating a PR and waiting for that to be released first (which would limit LSP functionality to probably 2.20+),
 * makes sense to hack together a quick TS version and use this as a backport
 */

/**
 * From the `pants help-all` JSON string, create the file content for a `__builtins__.pyi` stub for pyright
 * This module does not perform I/O operations
 *
 * @param help_json The output of `pants help-all`
 * @returns `__builtins__.pyi` file content
 */
export function generateBuiltins(help_json: string): string {
  const helpInfo: AllHelpInfo = JSON.parse(help_json);

  const functionStubs: string[] = [];
  for (const [k, v] of Object.entries(helpInfo.name_to_target_type_info)) {
    functionStubs.push(makeFunctionStub(v));
  }

  return FILE_TEMPLATE.replace("{functions}", functionStubs.join("\n\n"));
}

/**
 * "All available help info."
 * Corresponds to `AllHelpInfo` in help_info_extracter.py in Pants
 * Commenting the fields we don't need here
 */
interface AllHelpInfo {
  // scope_to_help_info: { [key: string]: any };
  // name_to_goal_info: { [key: string]: any };
  name_to_target_type_info: { [key: string]: TargetTypeHelpInfo };
  // name_to_rule_info: { [key: string]: any };
  // name_to_api_type_info: { [key: string]: any };
  // name_to_backend_help_info: { [key: string]: any };
  // name_to_build_file_info: { [key: string]: any };
  // env_var_to_help_info: { [key: string]: any };
}

/**
 * "A container for help information for a target type."
 * Corresponds to `TargetTypeHelpInfo` in help_info_extracter.py in Pants
 */
interface TargetTypeHelpInfo {
  alias: string;
  description: string;
  fields: TargetFieldHelpInfo[];
  provider: string;
  summary: string;
}

/**
 * "A container for help information for a field in a target type."
 * Corresponds to `FieldHelpInfo` in help_info_extracter.py in Pants
 */
interface TargetFieldHelpInfo {
  alias: string;
  default?: string;
  description: string;
  provider: string;
  required: boolean;
  type_hint: string;
}

function makeFunctionStub(t: TargetTypeHelpInfo): string {
  const parameters: string[] = [];
  const parameterDescriptions: string[] = [];

  // Sort the fields into Python-safe order (defaults last)
  const fields = [...t.fields].sort((a, b) =>
    a.required === b.required ? 0 : a.required ? -1 : 1
  );
  fields.unshift({
    alias: "name",
    default: undefined,
    description: "The name of the target.",
    provider: "",
    required: true,
    type_hint: "str",
  });

  // Perform parameter-level replacements
  for (const f of fields) {
    const maybe_default = f.required ? "" : ` = ${f.default}`.replace("null", "None");
    parameters.push(`${f.alias}: ${f.type_hint}${maybe_default}`);
    parameterDescriptions.push(`:param ${f.alias}: ${f.description}`);
  }

  // Perform function-level replacement
  return `def ${t.alias}(\n    ${parameters.join(",\n    ")}\n) -> None:
    """
    ${t.summary}

    ${t.description}

    ${parameterDescriptions.join("\n    ")}
    """`;
}

const FILE_TEMPLATE: string = `# This file is generated by suspenders/lsp/builtins.ts as a backport of an upcoming Pants-native feature

from __future__ import annotations

from collections.abc import Iterable
from typing import Any, Dict, Tuple, Union

# Not quite accurate - but good enough for typings
FrozenDict = Dict<string, any>

{functions}`;
