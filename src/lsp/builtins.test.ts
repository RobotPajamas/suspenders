import { generateBuiltins } from "./builtins";

test("generateBuiltins correctly parses `help-all` string", () => {
  expect(generateBuiltins(helpAllOutput)).toEqual(expectedFileContent);
});

const helpAllOutput = `{
    "scope_to_help_info" : {},
    "name_to_target_type_info": {
        "pex_binary": {
            "alias": "pex_binary",
            "description": "A Python target that can be converted into an executable PEX file and other stuff.",
            "fields": [
                {
                    "alias": "description",
                    "default": null,
                    "description": "A human-readable description of the target.",
                    "provider": "",
                    "required": false,
                    "type_hint": "str | None"
                },
                {
                    "alias": "environment",
                    "default": "'__local__'",
                    "description": "Specify which environment target to consume environment-sensitive options from.",
                    "provider": "",
                    "required": false,
                    "type_hint": "str | None"
                }
            ],
            "provider": "pants.backend.python",
            "summary": "A Python target that can be converted into an executable PEX file."
        },
        "python_test": {
            "alias": "python_test",
            "description": "A single Python test file.",
            "fields": [
                {
                    "alias": "tags",
                    "default": null,
                    "description": "Arbitrary strings to describe a target.",
                    "provider": "",
                    "required": false,
                    "type_hint": "Iterable[str] | None"
                },
                {
                    "alias": "skip_mypy",
                    "default": "False",
                    "description": "If true, don't run MyPy on this target's code.",
                    "provider": "pants.backend.python.typecheck.mypy",
                    "required": false,
                    "type_hint": "bool"
                },
                {
                    "alias": "source",
                    "default": null,
                    "description": "A single file that belongs to this target.",
                    "provider": "",
                    "required": true,
                    "type_hint": "str"
                },
                {
                    "alias": "description",
                    "default": null,
                    "description": "A human-readable description of the target.",
                    "provider": "",
                    "required": false,
                    "type_hint": "str | None"
                }
            ],
            "provider": "pants.backend.python",
            "summary": "A single Python test file, written in either Pytest style or unittest style."
        }
    },
    "name_to_rule_info": {},
    "name_to_build_file_info": {
        "pex_binary": {
            "documentation": null,
            "is_target": true,
            "name": "pex_binary",
            "signature": "(**kwargs: 'Any') -> 'TargetAdaptor'"
        },
        "python_artifact": {
            "documentation": "Represents a Python setup.py-based project.",
            "is_target": false,
            "name": "python_artifact",
            "signature": "(**kwargs) -> None"
        }
    }
}`;

const expectedFileContent = `# This file is generated by suspenders/lsp/builtins.ts as a backport of an upcoming Pants-native feature

from __future__ import annotations

from collections.abc import Iterable
from typing import Any, Dict, Tuple, Union

# Not quite accurate - but good enough for typings
FrozenDict = Dict[str, Any]

class PythonArtifact: ...

def pex_binary(
    name: str,
    description: str | None = None,
    environment: str | None = '__local__'
) -> None:
    """
    A Python target that can be converted into an executable PEX file.

    A Python target that can be converted into an executable PEX file and other stuff.

    :param name: The name of the target.
    :param description: A human-readable description of the target.
    :param environment: Specify which environment target to consume environment-sensitive options from.
    """

def python_test(
    name: str,
    source: str,
    tags: Iterable[str] | None = None,
    skip_mypy: bool = False,
    description: str | None = None
) -> None:
    """
    A single Python test file, written in either Pytest style or unittest style.

    A single Python test file.

    :param name: The name of the target.
    :param source: A single file that belongs to this target.
    :param tags: Arbitrary strings to describe a target.
    :param skip_mypy: If true, don't run MyPy on this target's code.
    :param description: A human-readable description of the target.
    """

def python_artifact(**kwargs) -> PythonArtifact:
    """
    Represents a Python setup.py-based project.
    """`;
